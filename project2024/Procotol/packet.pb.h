// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
namespace Packet {
class ReqHeader;
struct ReqHeaderDefaultTypeInternal;
extern ReqHeaderDefaultTypeInternal _ReqHeader_default_instance_;
class ReqLogin;
struct ReqLoginDefaultTypeInternal;
extern ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
class ResHeader;
struct ResHeaderDefaultTypeInternal;
extern ResHeaderDefaultTypeInternal _ResHeader_default_instance_;
class ResLogin;
struct ResLoginDefaultTypeInternal;
extern ResLoginDefaultTypeInternal _ResLogin_default_instance_;
}  // namespace Packet
PROTOBUF_NAMESPACE_OPEN
template<> ::Packet::ReqHeader* Arena::CreateMaybeMessage<::Packet::ReqHeader>(Arena*);
template<> ::Packet::ReqLogin* Arena::CreateMaybeMessage<::Packet::ReqLogin>(Arena*);
template<> ::Packet::ResHeader* Arena::CreateMaybeMessage<::Packet::ResHeader>(Arena*);
template<> ::Packet::ResLogin* Arena::CreateMaybeMessage<::Packet::ResLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Packet {

enum PacketId : int {
  NONE = 0,
  REQ_LOGIN = 1,
  RES_LOGIN = 2,
  PacketId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PacketId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PacketId_IsValid(int value);
constexpr PacketId PacketId_MIN = NONE;
constexpr PacketId PacketId_MAX = RES_LOGIN;
constexpr int PacketId_ARRAYSIZE = PacketId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketId_descriptor();
template<typename T>
inline const std::string& PacketId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketId_descriptor(), enum_t_value);
}
inline bool PacketId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketId>(
    PacketId_descriptor(), name, value);
}
// ===================================================================

class ReqHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.ReqHeader) */ {
 public:
  inline ReqHeader() : ReqHeader(nullptr) {}
  ~ReqHeader() override;
  explicit PROTOBUF_CONSTEXPR ReqHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqHeader(const ReqHeader& from);
  ReqHeader(ReqHeader&& from) noexcept
    : ReqHeader() {
    *this = ::std::move(from);
  }

  inline ReqHeader& operator=(const ReqHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHeader& operator=(ReqHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqHeader* internal_default_instance() {
    return reinterpret_cast<const ReqHeader*>(
               &_ReqHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqHeader& a, ReqHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqHeader& from) {
    ReqHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.ReqHeader";
  }
  protected:
  explicit ReqHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // .Packet.PacketId packetId = 1;
  void clear_packetid();
  ::Packet::PacketId packetid() const;
  void set_packetid(::Packet::PacketId value);
  private:
  ::Packet::PacketId _internal_packetid() const;
  void _internal_set_packetid(::Packet::PacketId value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.ReqHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int packetid_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ResHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.ResHeader) */ {
 public:
  inline ResHeader() : ResHeader(nullptr) {}
  ~ResHeader() override;
  explicit PROTOBUF_CONSTEXPR ResHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResHeader(const ResHeader& from);
  ResHeader(ResHeader&& from) noexcept
    : ResHeader() {
    *this = ::std::move(from);
  }

  inline ResHeader& operator=(const ResHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResHeader& operator=(ResHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResHeader* internal_default_instance() {
    return reinterpret_cast<const ResHeader*>(
               &_ResHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResHeader& a, ResHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResHeader& from) {
    ResHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.ResHeader";
  }
  protected:
  explicit ResHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
    kErrorFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // .Packet.PacketId packetId = 1;
  void clear_packetid();
  ::Packet::PacketId packetid() const;
  void set_packetid(::Packet::PacketId value);
  private:
  ::Packet::PacketId _internal_packetid() const;
  void _internal_set_packetid(::Packet::PacketId value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 length = 3;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.ResHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int packetid_;
    int32_t error_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ReqLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.ReqLogin) */ {
 public:
  inline ReqLogin() : ReqLogin(nullptr) {}
  ~ReqLogin() override;
  explicit PROTOBUF_CONSTEXPR ReqLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLogin(const ReqLogin& from);
  ReqLogin(ReqLogin&& from) noexcept
    : ReqLogin() {
    *this = ::std::move(from);
  }

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLogin& operator=(ReqLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLogin* internal_default_instance() {
    return reinterpret_cast<const ReqLogin*>(
               &_ReqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqLogin& a, ReqLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqLogin& from) {
    ReqLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.ReqLogin";
  }
  protected:
  explicit ReqLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Packet.ReqHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Packet::ReqHeader& header() const;
  PROTOBUF_NODISCARD ::Packet::ReqHeader* release_header();
  ::Packet::ReqHeader* mutable_header();
  void set_allocated_header(::Packet::ReqHeader* header);
  private:
  const ::Packet::ReqHeader& _internal_header() const;
  ::Packet::ReqHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Packet::ReqHeader* header);
  ::Packet::ReqHeader* unsafe_arena_release_header();

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.ReqLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Packet::ReqHeader* header_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ResLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.ResLogin) */ {
 public:
  inline ResLogin() : ResLogin(nullptr) {}
  ~ResLogin() override;
  explicit PROTOBUF_CONSTEXPR ResLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResLogin(const ResLogin& from);
  ResLogin(ResLogin&& from) noexcept
    : ResLogin() {
    *this = ::std::move(from);
  }

  inline ResLogin& operator=(const ResLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResLogin& operator=(ResLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResLogin* internal_default_instance() {
    return reinterpret_cast<const ResLogin*>(
               &_ResLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResLogin& a, ResLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ResLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResLogin& from) {
    ResLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.ResLogin";
  }
  protected:
  explicit ResLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Packet.ResHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Packet::ResHeader& header() const;
  PROTOBUF_NODISCARD ::Packet::ResHeader* release_header();
  ::Packet::ResHeader* mutable_header();
  void set_allocated_header(::Packet::ResHeader* header);
  private:
  const ::Packet::ResHeader& _internal_header() const;
  ::Packet::ResHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Packet::ResHeader* header);
  ::Packet::ResHeader* unsafe_arena_release_header();

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.ResLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Packet::ResHeader* header_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqHeader

// .Packet.PacketId packetId = 1;
inline void ReqHeader::clear_packetid() {
  _impl_.packetid_ = 0;
}
inline ::Packet::PacketId ReqHeader::_internal_packetid() const {
  return static_cast< ::Packet::PacketId >(_impl_.packetid_);
}
inline ::Packet::PacketId ReqHeader::packetid() const {
  // @@protoc_insertion_point(field_get:Packet.ReqHeader.packetId)
  return _internal_packetid();
}
inline void ReqHeader::_internal_set_packetid(::Packet::PacketId value) {
  
  _impl_.packetid_ = value;
}
inline void ReqHeader::set_packetid(::Packet::PacketId value) {
  _internal_set_packetid(value);
  // @@protoc_insertion_point(field_set:Packet.ReqHeader.packetId)
}

// int32 length = 2;
inline void ReqHeader::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t ReqHeader::_internal_length() const {
  return _impl_.length_;
}
inline int32_t ReqHeader::length() const {
  // @@protoc_insertion_point(field_get:Packet.ReqHeader.length)
  return _internal_length();
}
inline void ReqHeader::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void ReqHeader::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Packet.ReqHeader.length)
}

// -------------------------------------------------------------------

// ResHeader

// .Packet.PacketId packetId = 1;
inline void ResHeader::clear_packetid() {
  _impl_.packetid_ = 0;
}
inline ::Packet::PacketId ResHeader::_internal_packetid() const {
  return static_cast< ::Packet::PacketId >(_impl_.packetid_);
}
inline ::Packet::PacketId ResHeader::packetid() const {
  // @@protoc_insertion_point(field_get:Packet.ResHeader.packetId)
  return _internal_packetid();
}
inline void ResHeader::_internal_set_packetid(::Packet::PacketId value) {
  
  _impl_.packetid_ = value;
}
inline void ResHeader::set_packetid(::Packet::PacketId value) {
  _internal_set_packetid(value);
  // @@protoc_insertion_point(field_set:Packet.ResHeader.packetId)
}

// int32 error = 2;
inline void ResHeader::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t ResHeader::_internal_error() const {
  return _impl_.error_;
}
inline int32_t ResHeader::error() const {
  // @@protoc_insertion_point(field_get:Packet.ResHeader.error)
  return _internal_error();
}
inline void ResHeader::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void ResHeader::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Packet.ResHeader.error)
}

// int32 length = 3;
inline void ResHeader::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t ResHeader::_internal_length() const {
  return _impl_.length_;
}
inline int32_t ResHeader::length() const {
  // @@protoc_insertion_point(field_get:Packet.ResHeader.length)
  return _internal_length();
}
inline void ResHeader::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void ResHeader::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Packet.ResHeader.length)
}

// -------------------------------------------------------------------

// ReqLogin

// .Packet.ReqHeader header = 1;
inline bool ReqLogin::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ReqLogin::has_header() const {
  return _internal_has_header();
}
inline void ReqLogin::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::Packet::ReqHeader& ReqLogin::_internal_header() const {
  const ::Packet::ReqHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Packet::ReqHeader&>(
      ::Packet::_ReqHeader_default_instance_);
}
inline const ::Packet::ReqHeader& ReqLogin::header() const {
  // @@protoc_insertion_point(field_get:Packet.ReqLogin.header)
  return _internal_header();
}
inline void ReqLogin::unsafe_arena_set_allocated_header(
    ::Packet::ReqHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.ReqLogin.header)
}
inline ::Packet::ReqHeader* ReqLogin::release_header() {
  
  ::Packet::ReqHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Packet::ReqHeader* ReqLogin::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Packet.ReqLogin.header)
  
  ::Packet::ReqHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Packet::ReqHeader* ReqLogin::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Packet::ReqHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Packet::ReqHeader* ReqLogin::mutable_header() {
  ::Packet::ReqHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Packet.ReqLogin.header)
  return _msg;
}
inline void ReqLogin::set_allocated_header(::Packet::ReqHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Packet.ReqLogin.header)
}

// int32 id = 2;
inline void ReqLogin::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ReqLogin::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ReqLogin::id() const {
  // @@protoc_insertion_point(field_get:Packet.ReqLogin.id)
  return _internal_id();
}
inline void ReqLogin::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ReqLogin::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Packet.ReqLogin.id)
}

// string name = 3;
inline void ReqLogin::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ReqLogin::name() const {
  // @@protoc_insertion_point(field_get:Packet.ReqLogin.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqLogin::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Packet.ReqLogin.name)
}
inline std::string* ReqLogin::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Packet.ReqLogin.name)
  return _s;
}
inline const std::string& ReqLogin::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ReqLogin::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqLogin::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqLogin::release_name() {
  // @@protoc_insertion_point(field_release:Packet.ReqLogin.name)
  return _impl_.name_.Release();
}
inline void ReqLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Packet.ReqLogin.name)
}

// -------------------------------------------------------------------

// ResLogin

// .Packet.ResHeader header = 1;
inline bool ResLogin::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ResLogin::has_header() const {
  return _internal_has_header();
}
inline void ResLogin::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::Packet::ResHeader& ResLogin::_internal_header() const {
  const ::Packet::ResHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Packet::ResHeader&>(
      ::Packet::_ResHeader_default_instance_);
}
inline const ::Packet::ResHeader& ResLogin::header() const {
  // @@protoc_insertion_point(field_get:Packet.ResLogin.header)
  return _internal_header();
}
inline void ResLogin::unsafe_arena_set_allocated_header(
    ::Packet::ResHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.ResLogin.header)
}
inline ::Packet::ResHeader* ResLogin::release_header() {
  
  ::Packet::ResHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Packet::ResHeader* ResLogin::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Packet.ResLogin.header)
  
  ::Packet::ResHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Packet::ResHeader* ResLogin::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Packet::ResHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Packet::ResHeader* ResLogin::mutable_header() {
  ::Packet::ResHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Packet.ResLogin.header)
  return _msg;
}
inline void ResLogin::set_allocated_header(::Packet::ResHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Packet.ResLogin.header)
}

// int32 id = 2;
inline void ResLogin::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ResLogin::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ResLogin::id() const {
  // @@protoc_insertion_point(field_get:Packet.ResLogin.id)
  return _internal_id();
}
inline void ResLogin::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ResLogin::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Packet.ResLogin.id)
}

// string name = 3;
inline void ResLogin::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ResLogin::name() const {
  // @@protoc_insertion_point(field_get:Packet.ResLogin.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResLogin::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Packet.ResLogin.name)
}
inline std::string* ResLogin::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Packet.ResLogin.name)
  return _s;
}
inline const std::string& ResLogin::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResLogin::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResLogin::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResLogin::release_name() {
  // @@protoc_insertion_point(field_release:Packet.ResLogin.name)
  return _impl_.name_.Release();
}
inline void ResLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Packet.ResLogin.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Packet::PacketId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::PacketId>() {
  return ::Packet::PacketId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
